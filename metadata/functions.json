[{"name":"$colorToCMYK","aliases":[],"description":"Converts a color code from any supported format (hex, rgb, hsl, etc.) to a cmyk format.","brackets":true,"unwrap":true,"version":"1.0.1","output":["String"],"args":[{"name":"color","description":"The color string to convert.","rest":false,"required":true,"type":"String"}],"category":"conversion"},{"name":"$colorToHex","aliases":[],"description":"Converts a color code from any supported format (hex, rgb, hsl, etc.) to a hex format.","brackets":true,"unwrap":true,"version":"1.0.1","output":["String"],"args":[{"name":"color","description":"The color string to convert.","rest":false,"required":true,"type":"String"}],"category":"conversion"},{"name":"$colorToHSL","aliases":[],"description":"Converts a color code from any supported format (hex, rgb, hsl, etc.) to a hsl format.","brackets":true,"unwrap":true,"version":"1.0.1","output":["String"],"args":[{"name":"color","description":"The color string to convert.","rest":false,"required":true,"type":"String"}],"category":"conversion"},{"name":"$colorToInt","aliases":[],"description":"Converts a color code from any supported format (hex, rgb, hsl, etc.) to a int format.","brackets":true,"unwrap":true,"version":"1.0.1","output":["String"],"args":[{"name":"color","description":"The color string to convert.","rest":false,"required":true,"type":"String"}],"category":"conversion"},{"name":"$colorToRGB","aliases":["$colorToRGBA"],"description":"Converts a color code from any supported format (hex, rgb, hsl, etc.) to a rgb/rgba format.","brackets":true,"unwrap":true,"version":"1.0.1","output":["String"],"args":[{"name":"color","description":"The color string to convert.","rest":false,"required":true,"type":"String"},{"name":"alpha","description":"Whether to return as RGBA","rest":false,"type":"Boolean"}],"category":"conversion"},{"name":"$convertColor","aliases":["$colorConvert","$transformColor"],"description":"Converts a color code from any supported format (hex, rgb, hsl, etc.) to a target format.","brackets":true,"unwrap":true,"version":"1.0.0","output":["String"],"args":[{"name":"color","description":"The color string to convert.","rest":false,"required":true,"type":"String"},{"name":"to","description":"The format to convert the color to.","rest":false,"required":true,"type":"Enum","enum":["rgb","rgba","hex","hsl","int","cmyk"],"enumName":"ColorFormat"}],"category":"conversion"},{"name":"$parseColor","aliases":["$normalizeColor","$colorObject"],"description":"Parses and normalizes a color string to a structured object.","brackets":true,"unwrap":true,"version":"1.0.0","output":["Json"],"args":[{"name":"color","description":"The color string to parse","rest":false,"required":true,"type":"String"}],"category":"conversion"},{"name":"$averageColor","aliases":["$meanColor"],"description":"Calculates the average (mean) color from two or more input colors and returns it in the specified format.","brackets":true,"unwrap":true,"version":"1.0.2","output":["String"],"args":[{"name":"format","description":"The desired output format (hex, rgb, hsl, etc.).","rest":false,"required":true,"type":"Enum","enum":["rgb","rgba","hex","hsl","int","cmyk"],"enumName":"ColorFormat"},{"name":"colors","description":"Two or more colors to average.","rest":true,"required":true,"type":"String"}],"category":"generation"},{"name":"$blendColors","aliases":["$mixColors","$blend"],"description":"Blends two colors using a blend mode like average, multiply, or gamma.","brackets":true,"unwrap":true,"version":"1.0.0","output":["String"],"args":[{"name":"color 1","description":"The first color.","rest":false,"required":true,"type":"String"},{"name":"color 2","description":"The second color.","rest":false,"required":true,"type":"String"},{"name":"mode","description":"The blend mode to use (average, additive, screen, multiply, gamma).","rest":false,"required":true,"type":"Enum","enum":["average","additive","screen","multiply","gamma"],"enumName":"BlendMode"},{"name":"t","description":"Blend factor between 0 and 1. Used only for \"average\" and \"gamma\" modes. Defaults to 0.5.","rest":false,"type":"Number"}],"category":"generation"},{"name":"$colorFromTemperature","aliases":["$colorFromTemp","$kelvinToColor","$colorTemperatureToColor"],"description":"Generates a color from a given color temperature (Kelvin).","brackets":true,"unwrap":true,"version":"1.0.2","output":["String"],"args":[{"name":"kelvin","description":"Color temperature in Kelvin (e.g. 2000–40000).","rest":false,"required":true,"type":"Number"},{"name":"output format","description":"The desired output format: hex, rgb, rgba, hsl, int, or cmyk.","rest":false,"type":"Enum","enum":["rgb","rgba","hex","hsl","int","cmyk"],"enumName":"ColorFormat"}],"category":"generation"},{"name":"$generateGradient","aliases":[],"description":"Generates a gradient of color codes between two or more colors.","brackets":true,"unwrap":true,"version":"1.0.1","output":["Json"],"args":[{"name":"steps","description":"Total steps in the gradient","rest":false,"required":true,"type":"Number"},{"name":"output format","description":"Format to return each color in: hex, rgb, rgba, hsl, or cmyk","rest":false,"required":true,"type":"Enum","enum":["rgb","rgba","hex","hsl","int","cmyk"],"enumName":"ColorFormat"},{"name":"includeStops","description":"Include original stops in output (default: false)","rest":false,"type":"Boolean"},{"name":"mode","description":"How to interpolate between colors (default: average)","rest":false,"type":"Enum","enum":["average","additive","screen","multiply","gamma"],"enumName":"BlendMode"},{"name":"colors","description":"At least two color codes to interpolate between","rest":true,"required":false,"type":"String"}],"category":"generation"},{"name":"$randomColor","description":"Generates a random color in the specified format (hex by default).","brackets":false,"unwrap":true,"version":"1.0.0","output":["String"],"args":[{"name":"output format","description":"The desired output format: hex, rgb, rgba, hsl, int, or cmyk.","rest":false,"type":"Enum","enum":["rgb","rgba","hex","hsl","int","cmyk"],"enumName":"ColorFormat"}],"category":"generation"},{"name":"$invertColor","aliases":["$colorInvert","$inverseColor"],"description":"Inverts a color's RGB channels and returns an new inverted color.","brackets":true,"unwrap":true,"version":"1.0.0","output":["String"],"args":[{"name":"color","description":"The color to invert.","rest":false,"required":true,"type":"String"}],"category":"manipulation"},{"name":"$shade","aliases":["$shadeColor"],"description":"Darkens a color by blending it with black.","brackets":true,"unwrap":true,"version":"1.0.2","output":["String"],"args":[{"name":"color","description":"The color to shade.","rest":false,"required":true,"type":"String"},{"name":"amount","description":"Amount to darken (0–1).","rest":false,"required":true,"type":"Number"}],"category":"manipulation"},{"name":"$tint","aliases":["$tintColor"],"description":"Lightens a color by blending it with white.","brackets":true,"unwrap":true,"version":"1.0.2","output":["String"],"args":[{"name":"color","description":"The color to tint.","rest":false,"required":true,"type":"String"},{"name":"amount","description":"Amount to lighten (0–1).","rest":false,"required":true,"type":"Number"}],"category":"manipulation"},{"name":"$colorDistance","aliases":["$colorDifference","$colorDiff","$colorSimilarity"],"description":"Calculates the distance between two colors using a specified formula. Defaults to cie76.","brackets":true,"unwrap":true,"version":"1.0.2","output":["Number"],"args":[{"name":"color 1","description":"The first color.","rest":false,"required":true,"type":"String"},{"name":"color 2","description":"The second color.","rest":false,"required":true,"type":"String"},{"name":"mode","description":"Distance mode: rgb, weighted, cie76, or luminance.","rest":false,"type":"Enum","enum":["EuclideanRGB","WeightedRGB","CIE76","Luminance"],"enumName":"ColorDistanceMode"}],"category":"utility"},{"name":"$colorFormatType","aliases":["$getColorFormat","$detectColorFormat"],"description":"Returns the format of a given color code (hex, rgb, rgba, hsl, etc).","version":"1.0.0","brackets":true,"unwrap":true,"output":["String"],"args":[{"name":"color","description":"The color code to get the format of","rest":false,"required":true,"type":"String"}],"category":"utility"},{"name":"$colorTemperature","aliases":["$temperatureFromColor","$colorToTemperature","$colorTemp"],"description":"Estimates the color temperature (Kelvin) from a given color.","brackets":true,"unwrap":true,"version":"1.0.2","output":["String"],"args":[{"name":"color","description":"The input color.","rest":false,"required":true,"type":"String"},{"name":"returnKelvin","description":"If true, return the approximate Kelvin instead of warm/cool/neutral classification.","rest":false,"type":"Boolean"}],"category":"utility"},{"name":"$getColorChannel","aliases":["$colorChannel","$extractColorChannel"],"description":"Extracts a specific channel (e.g. red, hue, saturation) from a color code.","brackets":true,"unwrap":true,"version":"1.0.0","output":["Number"],"args":[{"name":"color","description":"The color string to extract from.","rest":false,"required":true,"type":"String"},{"name":"channel","description":"The channel to extract (e.g. red, hue, cyan).","rest":false,"required":true,"type":"Enum","enum":["red","green","blue","alpha","hue","saturation","lightness","cyan","magenta","yellow","key"],"enumName":"ColorChannels"}],"category":"utility"},{"name":"$isDarkColor","aliases":["$isDark","$isColorDark"],"description":"Checks if a color is dark based on luminance (returns true/false).","brackets":true,"unwrap":true,"version":"1.0.1","output":["Boolean"],"args":[{"name":"color","description":"The color code to check.","rest":false,"required":true,"type":"String"},{"name":"threshold","description":"Override default luminance cutoff (0–1, default 0.5).","rest":false,"type":"Number"}],"category":"utility"},{"name":"$isLightColor","aliases":["$isLight","$isColorLight"],"description":"Checks if a color is light based on luminance (returns true/false).","brackets":true,"unwrap":true,"version":"1.0.1","output":["Boolean"],"args":[{"name":"color","description":"The color code to check.","rest":false,"required":true,"type":"String"},{"name":"threshold","description":"Override default luminance cutoff (0–1, default 0.5).","rest":false,"type":"Number"}],"category":"utility"},{"name":"$isValidColor","version":"1.0.1","description":"Checks whether given color code is valid.","unwrap":true,"brackets":true,"output":["Boolean"],"args":[{"name":"color","description":"The color code to check validity of","rest":false,"required":true,"type":"String"}],"category":"utility"},{"name":"$prettifyColor","aliases":["$formatColor","$normalizeColor"],"description":"Returns a cleaner, standardized version of the given color string.","brackets":true,"unwrap":true,"version":"1.0.0","output":["String"],"args":[{"name":"color","description":"The color string to prettify.","rest":false,"required":true,"type":"String"}],"category":"utility"}]